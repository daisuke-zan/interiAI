import pandas as pd
import streamlit as st
import streamlit_antd_components as sac


def init():
    st.set_page_config(page_title="Interior AI Demo ",
                       page_icon="ü™ë",
                       layout="wide",
                       initial_sidebar_state="collapsed")
    # „Çª„ÉÉ„Ç∑„Éß„É≥
    if 'scraping_data_source_type' not in st.session_state:
        st.session_state['scraping_data_source_type'] = 0
    if 'scraping_all_url_list' not in st.session_state:
        st.session_state['scraping_all_url_list'] = pd.DataFrame()
    if 'scraping_selected_url_list' not in st.session_state:
        st.session_state['scraping_selected_url_list'] = pd.DataFrame()


def sidebar():
    with st.sidebar:
        selected_menu = sac.menu([
            sac.MenuItem('ÂÆ∂ÂÖ∑ÈÅ∏ÂÆö', icon='house-door-fill'),
            sac.MenuItem('ÂïÜÂìÅ„Éá„Éº„Çø‰ΩúÊàê',
                         icon='database-fill',
                         children=[
                             sac.MenuItem('„Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞', icon='globe'),
                             sac.MenuItem('PDF„Éá„Éº„ÇøÊäΩÂá∫', icon='filetype-pdf')
                         ])
        ],
                                 open_all=True)
    return selected_menu


def search_conditions():
    with st.expander(label='ÈÅ∏ÂÆöÊù°‰ª∂', expanded=True):
        # „ÉÜ„Ç§„Çπ„Éà
        with st.container(border=True):
            taste = sac.chip(items=[
                sac.ChipItem(label='„Éä„ÉÅ„É•„É©„É´', icon='tree-fill'),
                sac.ChipItem(label='„Ç§„É≥„ÉÄ„Çπ„Éà„É™„Ç¢„É´', icon='building-fill'),
            ],
                             label='„ÉÜ„Ç§„Çπ„Éà',
                             align='start',
                             radius='xl',
                             variant='light',
                             multiple=False)

        # Á¥çÊúü
        with st.container(border=True):
            delivery = sac.chip(items=[
                sac.ChipItem(label='Âú®Â∫´ÂìÅ', icon='truck-fill'),
                sac.ChipItem(label='3ÈÄ±Èñì', icon='calendar-check-fill'),
                sac.ChipItem(label='1„É∂Êúà', icon='calendar-check-fill'),
                sac.ChipItem(label='1.5„Äú2„É∂Êúà', icon='calendar-check-fill'),
            ],
                                label='Á¥çÊúü',
                                align='start',
                                radius='xl',
                                variant='outline',
                                multiple=False)

        # ‰æ°Ê†ºÂ∏Ø
        with st.container(border=True):
            price = sac.chip(items=[
                sac.ChipItem(label='Low', icon='cash-coin'),
                sac.ChipItem(label='Middle', icon='cash-coin'),
                sac.ChipItem(label='High', icon='cash-coin')
            ],
                             label='‰æ°Ê†ºÂ∏Ø',
                             align='start',
                             radius='xl',
                             variant='outline',
                             multiple=True)
        # „Ç´„ÉÜ„Ç¥„É™
        with st.container(border=True):
            category = sac.cascader(items=[
                sac.CasItem('„ÇΩ„Éï„Ç°',
                            children=[
                                sac.CasItem('1‰∫∫Êéõ„Åë„ÇΩ„Éï„Ç°'),
                                sac.CasItem('2‰∫∫Êéõ„Åë„ÇΩ„Éï„Ç°'),
                                sac.CasItem('3‰∫∫Êéõ„Åë„ÇΩ„Éï„Ç°'),
                            ]),
                sac.CasItem('„ÉÅ„Çß„Ç¢„ÉªÊ§ÖÂ≠ê',
                            children=[
                                sac.CasItem('„Ç™„Éï„Ç£„Çπ„ÉÅ„Çß„Ç¢„Éª„ÉØ„Éº„ÇØ„ÉÅ„Çß„Ç¢'),
                                sac.CasItem('„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÉÅ„Çß„Ç¢'),
                                sac.CasItem('„ÉÄ„Ç§„Éã„É≥„Ç∞„ÉÅ„Çß„Ç¢'),
                            ]),
            ],
                                    label='„Ç´„ÉÜ„Ç¥„É™',
                                    placeholder='„Ç´„ÉÜ„Ç¥„É™„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºà„Åæ„Å†ÂÖ®„Ç´„ÉÜ„Ç¥„É™ÂÖ•„Çå„Å¶„Åæ„Åõ„ÇìÔºâ',
                                    multiple=True,
                                    search=True,
                                    clear=True)
        # „Çµ„Ç§„Ç∫
        with st.container(border=True):
            st.caption('„Çµ„Ç§„Ç∫')
            col1, col2, col3, col4 = st.columns(spec=4, gap='large')
            with col1:
                # ÂπÖ
                witdh = st.slider(label='ÂπÖ',
                                  min_value=0,
                                  max_value=8000,
                                  value=(0, 8000),
                                  step=100,
                                  format='%d mm',
                                  help='ÂπÖ„ÅÆÁØÑÂõ≤„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
            with col2:
                # Â••Ë°å
                depth = st.slider(label='Â••Ë°å',
                                  min_value=0,
                                  max_value=4000,
                                  value=(0, 4000),
                                  step=100,
                                  format='%d mm',
                                  help='Â••Ë°å„ÅÆÁØÑÂõ≤„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
            with col3:
                # È´ò„Åï
                height = st.slider(label='È´ò„Åï',
                                   min_value=0,
                                   max_value=3000,
                                   value=(0, 3000),
                                   step=100,
                                   format='%d mm',
                                   help='È´ò„Åï„ÅÆÁØÑÂõ≤„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
            with col4:
                # Â∫ßÈù¢È´ò
                sheet_height = st.slider(label='Â∫ßÈù¢È´ò',
                                         min_value=0,
                                         max_value=3000,
                                         value=(0, 3000),
                                         step=100,
                                         format='%d mm',
                                         help='Â∫ßÈù¢È´ò„ÅÆÁØÑÂõ≤„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')

    # „ÉÅ„ÉÉ„Éó„ÅÆÈÅ∏ÊäûÁµêÊûú„ÇíË°®Á§∫
    conditions = {
        '„ÉÜ„Ç§„Çπ„Éà': taste if taste != '' else 'Êú™ÈÅ∏Êäû',
        'Á¥çÊúü': delivery if delivery != '' else 'Êú™ÈÅ∏Êäû',
        '‰æ°Ê†ºÂ∏Ø': price if price != '' else 'Êú™ÈÅ∏Êäû',
        '„Ç´„ÉÜ„Ç¥„É™': category if category != '' else 'Êú™ÈÅ∏Êäû',
        'ÂπÖ': witdh,
        'Â••Ë°å': depth,
        'È´ò„Åï': height,
        'Â∫ßÈù¢È´ò': sheet_height
    }
    return conditions


def chat_input():
    prompt = st.chat_input(placeholder="Ê§úÁ¥¢„Åó„Åü„ÅÑÂÆ∂ÂÖ∑„ÅÆ„Ç§„É°„Éº„Ç∏„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ", accept_file=True)
    if prompt:
        # st.write(f"User has sent the following prompt: {prompt}")
        with st.chat_message(name="assistant"):
            st.markdown('''
„Åì„Å°„Çâ„ÅÆÂïÜÂìÅ„ÅØ„ÅÑ„Åã„Åå„Åß„Åó„Çá„ÅÜ„ÅãÔºü  
ÂïÜÂìÅÂêçÔºö[PENTE 1P SOFA](https://www.asplund-contract.com/product/12426/)  
„Éñ„É©„É≥„ÉâÔºöWork Plus  
Size:W760 D760 H670 SH425  
Material:Fabric, Steel  
Price:Ôø•120,000  
![PENTE 1P SOFA](https://www.asplund-contract.com/wp-content/uploads/2024/06/wp_pente1psofa-3-600x600.jpg)
  
  
ÂïÜÂìÅÂêçÔºö[MELTONE 1P SOFA](https://www.asplund-contract.com/product/12396/)  
„Éñ„É©„É≥„ÉâÔºöWork Plus  
Size:W870 D720 H750 SH410
Material:Fabric, Steel  
Price:Ôø•110,000  
![PENTE 1P SOFA](https://www.asplund-contract.com/wp-content/uploads/2024/06/wp_meltone1psofa-1-600x600.jpg)
''')


def scrapintg():
    url_analyze_flag = False
    scraping_test_flag = False
    scraping_all_flag = False

    # „Éá„Éº„Çø„ÇΩ„Éº„Çπ
    with st.expander(label='„Éá„Éº„Çø„ÇΩ„Éº„Çπ', expanded=True):
        data_source_type = sac.segmented(
            items=[
                sac.SegmentedItem(label='XML„Çµ„Ç§„Éà„Éû„ÉÉ„Éó'),
                sac.SegmentedItem(label='URL'),
            ],
            return_index=True,
            label='',
            size='sm',
            radius='sm',
            align='center',
            key='scraping_data_source_type',
        )

        url = ''
        if data_source_type == 0:  # XML„Çµ„Ç§„Éà„Éû„ÉÉ„Éó
            url = st.text_input(label='XML„Çµ„Ç§„Éà„Éû„ÉÉ„Éó„ÅÆURL„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
                                placeholder='https://example.com/sitemap.xml',
                                help='XML„Çµ„Ç§„Éà„Éû„ÉÉ„Éó„ÅÆURL„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
        elif data_source_type == 1:  # URL
            url = st.text_input(label='URL„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
                                placeholder='https://example.com',
                                help='„Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞„Åó„Åü„ÅÑ„Éö„Éº„Ç∏„ÅÆURL„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
        else:
            url = ''

        # URLËß£Êûê„Éú„Çø„É≥
        url_analyze_flag = st.button(label='URLËß£Êûê',
                                     icon='üîç',
                                     use_container_width=True,
                                     disabled=True if url == '' else False)

    # URL‰∏ÄË¶ß
    if url_analyze_flag or len(st.session_state['scraping_all_url_list']) > 0:
        # „Åì„Åì„Å´„Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞„ÅÆÂá¶ÁêÜ„ÇíËøΩÂä†
        with st.expander(label='URL‰∏ÄË¶ß', expanded=True):
            df = pd.DataFrame([
                {
                    "URL": "https://example.com/product1"
                },
                {
                    "URL": "https://example.com/product2"
                },
                {
                    "URL": "https://example.com/product3"
                },
            ])
            st.session_state['scraping_all_url_list'] = df
            selection = st.dataframe(df,
                                     column_config={
                                         "URL": st.column_config.LinkColumn("URL")
                                     },
                                     use_container_width=True,
                                     hide_index=True,
                                     on_select="rerun",
                                     selection_mode="multi-row").selection
            # ÈÅ∏Êäû„Åï„Çå„ÅüURL„Çí„Çª„ÉÉ„Ç∑„Éß„É≥„Çπ„ÉÜ„Éº„Éà„Å´‰øùÂ≠ò
            if selection.rows:
                st.session_state['scraping_selected_url_list'] = df.iloc[selection.rows, :]
            else:
                st.session_state['scraping_selected_url_list'] = pd.DataFrame()

            # „Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞„ÉÜ„Çπ„Éà„Éú„Çø„É≥
            if len(st.session_state['scraping_selected_url_list']) > 0:
                scraping_test_flag = st.button(label='„Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞„Äê„ÉÜ„Çπ„ÉàÂÆüË°å„Äë',
                                               icon='üß™',
                                               use_container_width=True)
            # „Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞ÂÆüË°å„Éú„Çø„É≥
            if len(st.session_state['scraping_all_url_list']) > 0:
                scraping_all_flag = st.button(label='„Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞„ÄêÂÖ®ÂÆüË°å„Äë',
                                              icon='üï∑Ô∏è',
                                              use_container_width=True)

    # „Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞„ÉÜ„Çπ„Éà
    if scraping_test_flag:
        with st.expander(label='„Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞„ÉÜ„Çπ„Éà', expanded=True):
            # „Åì„Åì„Å´„Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞„ÅÆ„ÉÜ„Çπ„ÉàÁµêÊûú„ÇíË°®Á§∫„Åô„ÇãÂá¶ÁêÜ„ÇíËøΩÂä†
            st.write("„Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞„ÉÜ„Çπ„Éà„ÇíÂÆüË°å„Åó„Åæ„Åó„Åü„ÄÇ")
    # „Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞ÁµêÊûú
    if scraping_all_flag:
        with st.expander(label='„Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞ÁµêÊûú', expanded=True):
            # „Åì„Åì„Å´„Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞„ÅÆÁµêÊûú„ÇíË°®Á§∫„Åô„ÇãÂá¶ÁêÜ„ÇíËøΩÂä†
            st.write("„Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞ÁµêÊûú„ÇíË°®Á§∫„Åó„Åæ„Åô„ÄÇ")
            st.button(label='„Éá„Éº„Çø„Çí‰øùÂ≠ò', icon='üíæ', use_container_width=True)


if __name__ == "__main__":
    # ÂàùÊúüÂåñ
    init()
    # „Çµ„Ç§„Éâ„Éê„Éº„ÅÆË°®Á§∫
    menu = sidebar()
    # „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆË°®Á§∫
    if menu == 'ÂÆ∂ÂÖ∑ÈÅ∏ÂÆö':
        conditions = search_conditions()
        # st.write(conditions)
        chat_input()
    elif menu == '„Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞':
        scrapintg()
    elif menu == 'PDF„Éá„Éº„ÇøÊäΩÂá∫':
        st.write("Êú™ÂÆüË£Ö")
    else:
        st.write("")

    # with st.expander(label='session', expanded=False):
    #     st.write(st.session_state)
